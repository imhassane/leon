@startuml
together {
package "Cache"{
  entity Cache {
     type: CacheType
     size: int
     replacementPolicy: CacheReplacementPolicy
  }

  enum CacheType {
     DATA_CACHE
     INSTRUCTION
  }

  enum CacheReplacementPolicy {
     LRU
     LRR
  }
}

entity FPU {}

package "Memory"{
  entity Memory {
     type: MemoryType
  }

  enum MemoryType {
     DRAM
     SRAM
  }
}

entity PredictionUnit {}

}

package "Input Output"{
  entity IO {
     type: string
     mode: IOMode
     debit: int
  }

  enum IOType {
     PCI
  }

  enum IOMode {
      64
      32
  }
}

together {
interface MonoCore extends Processor{
    cacheL1: Cache
    fpu: FPU
    frequency: int
    memory: Memory
}

interface MultiCore extends Processor{
    cacheL1: Cache
    fpu: FPU
    frequency: int
    memory: Memory
    predictionUnit: PredictionUnit
}
}

interface Processor{
    Core: List<Core>
    cacheL2: Cache
    io: IO
    isFaultTolerant: boolean
}

Processor::io -- "Input Output"


class Leon1 extends MonoCore {}

class Leon2 extends Leon1 {}

class Leon3 extends MultiCore {
}

class Leon4 extends Leon3 {}

class Leon5 extends Leon4 {}
@enduml
